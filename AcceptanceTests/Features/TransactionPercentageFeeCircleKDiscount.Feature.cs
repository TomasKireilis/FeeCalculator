// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptanceTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class TransactionPercentageFeeDiscountFeature : Xunit.IClassFixture<TransactionPercentageFeeDiscountFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "TransactionPercentageFeeCircleKDiscount.Feature"
#line hidden
        
        public TransactionPercentageFeeDiscountFeature(TransactionPercentageFeeDiscountFeature.FixtureData fixtureData, AcceptanceTests_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "TransactionPercentageFeeDiscount", "\t\tAs a MobilePay accountant I want (TELIA 10% dicount for transaction, CIRCLE_K 2" +
                    "0% dicount for transaction) to get Transaction Percentage Fee Discount,\r\n\t\tso th" +
                    "at MobilePay would be more attractive to big merchants", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CalculateTransactionPercentageFeeDiscountForCircleK")]
        [Xunit.TraitAttribute("FeatureTitle", "TransactionPercentageFeeDiscount")]
        [Xunit.TraitAttribute("Description", "CalculateTransactionPercentageFeeDiscountForCircleK")]
        public virtual void CalculateTransactionPercentageFeeDiscountForCircleK()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CalculateTransactionPercentageFeeDiscountForCircleK", null, ((string[])(null)));
#line 5
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
testRunner.Given("Merchant repository is populated with Transaction Percentage Fee Discount busines" +
                        "s logic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "MerchantName",
                            "Amount"});
                table5.AddRow(new string[] {
                            "2018-09-02",
                            "CIRCLE_K",
                            "120"});
                table5.AddRow(new string[] {
                            "2018-09-04",
                            "CIRCLE_K",
                            "200"});
                table5.AddRow(new string[] {
                            "2018-10-22",
                            "CIRCLE_K",
                            "300"});
                table5.AddRow(new string[] {
                            "2018-10-29",
                            "CIRCLE_K",
                            "150"});
#line 7
testRunner.Given("that transactions where made", ((string)(null)), table5, "Given ");
#line hidden
#line 13
testRunner.When("fees calculation app is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "FeeAmount"});
                table6.AddRow(new string[] {
                            "0.96"});
                table6.AddRow(new string[] {
                            "1.60"});
                table6.AddRow(new string[] {
                            "2.40"});
                table6.AddRow(new string[] {
                            "1.20"});
#line 14
testRunner.Then("the output for Transaction Percentage Fee is", ((string)(null)), table6, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="CalculateTransactionPercentageFeeDiscountForTelia")]
        [Xunit.TraitAttribute("FeatureTitle", "TransactionPercentageFeeDiscount")]
        [Xunit.TraitAttribute("Description", "CalculateTransactionPercentageFeeDiscountForTelia")]
        public virtual void CalculateTransactionPercentageFeeDiscountForTelia()
        {
            string[] tagsOfScenario = ((string[])(null));
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CalculateTransactionPercentageFeeDiscountForTelia", null, ((string[])(null)));
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 22
testRunner.Given("Merchant repository is populated with Transaction Percentage Fee Discount busines" +
                        "s logic", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Date",
                            "MerchantName",
                            "Amount"});
                table7.AddRow(new string[] {
                            "2018-09-02",
                            "TELIA",
                            "120"});
                table7.AddRow(new string[] {
                            "2018-09-04",
                            "TELIA",
                            "200"});
                table7.AddRow(new string[] {
                            "2018-10-22",
                            "TELIA",
                            "300"});
                table7.AddRow(new string[] {
                            "2018-10-29",
                            "TELIA",
                            "150"});
#line 23
testRunner.Given("that transactions where made", ((string)(null)), table7, "Given ");
#line hidden
#line 29
testRunner.When("fees calculation app is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "FeeAmount"});
                table8.AddRow(new string[] {
                            "1.08"});
                table8.AddRow(new string[] {
                            "1.80"});
                table8.AddRow(new string[] {
                            "2.70"});
                table8.AddRow(new string[] {
                            "1.35"});
#line 30
testRunner.Then("the output for Transaction Percentage Fee is", ((string)(null)), table8, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                TransactionPercentageFeeDiscountFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                TransactionPercentageFeeDiscountFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
